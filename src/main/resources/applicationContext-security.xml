<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
           http://www.springframework.org/schema/security  
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- 不要过滤图片等静态资源，其中**代表可以跨越目录，*不可以跨越目录。 -->
    <http pattern="/**/*.jpg" security="none"/>
    <http pattern="/**/*.pdf" security="none"/>
    <http pattern="/**/*.rm" security="none"/>
    <http pattern="/**/*.rmvb" security="none"/>
    <http pattern="/**/*.wmv" security="none"/>
    <http pattern="/**/*.avi" security="none"/>
    <http pattern="/**/*.mp4" security="none"/>
    <http pattern="/**/*.3gp" security="none"/>
    <http pattern="/**/*.mkv" security="none"/>
    <http pattern="/**/*.flv" security="none"/>

    <http pattern="/**/*.png" security="none"/>
    <http pattern="/**/*.gif" security="none"/>
    <http pattern="/**/*.css" security="none"/>
    <http pattern="/**/*.js" security="none"/>
    <http pattern="/**/*.zip" security="none"/>
    <http pattern="/**/*.swf" security="none"/>
    <http pattern="/**/*.b3d" security="none"/>
    <http pattern="/**/*.CAB" security="none"/>
    <http pattern="/**/*.woff" security="none"/>
    <http pattern="/**/*.svg" security="none"/>
    <http pattern="/**/*.eot" security="none"/>

    <http pattern="/**/*.dll" security="none"/>
    <http pattern="/**/*.exe" security="none"/>
    <http pattern="/**/*.config" security="none"/>
    <http pattern="/**/*.map" security="none"/>
    <http pattern="/**/*.html" security="none"/>
    <http pattern="/**/*.jsp" security="none"/>

    <http pattern="/**/*.min.map" security="none"/>

    <http pattern="/sys/login" security="none"/>


    <!-- 登陆成功后置处理 -->
    <beans:bean id="authenticationSuccessHandler" class="com.medicine.framework.security.log.LoginSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/sys/main"></beans:property>  <!-- /server/user/loginSuc.json -->
        <beans:property name="forwardToDestination" value="false"></beans:property>
    </beans:bean>


    <!-- 退出成功后置处理 -->
    <beans:bean id="customLogoutHandler" class="com.medicine.framework.security.log.CustomLogoutHandler">
        <beans:property name="logoutSuccessUrl" value="/login.jsp?logout"></beans:property>
        <beans:property name="forwardToSuccess" value="false"></beans:property>
    </beans:bean>

    <!-- 登陆失败后置处理 -->
    <beans:bean id="loginFailureHandler" class="com.medicine.framework.security.log.LoginFailureHandler">
        <beans:property name="defaultFailureUrl" value="/login.jsp?error=true"></beans:property>
        <beans:property name="forwardToDestination" value="false"></beans:property>
    </beans:bean>

    <http auto-config="false" use-expressions="true" entry-point-ref="loginEntryPoint">

        <access-denied-handler ref="accessDeniedHandler"/>

        <form-login login-page="/login.jsp" default-target-url="/sys/main" login-processing-url="/login"
                    authentication-failure-handler-ref="loginFailureHandler"
                    authentication-success-handler-ref="authenticationSuccessHandler"/><!-- /server/user/loginError.json -->

        <!-- 用户退出 -->
        <logout logout-url="/logout" delete-cookies="JSESSIONID" invalidate-session="true"
                success-handler-ref="customLogoutHandler"/>

        <!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
        <remember-me token-validity-seconds="1209600" remember-me-parameter="remember_me" data-source-ref="dataSource"/>

        <custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>

        <!-- 检测失效的sessionId,超时时定位到另外一个URL session-fixation-protection="none " -->
        <!-- session-authentication-strategy-ref="concurrentSessionControlStrategy" -->
        <session-management invalid-session-url="/login.jsp"
                            session-authentication-error-url="/login.jsp"
                            session-authentication-strategy-ref="concurrentSessionControlStrategy"/>
    </http>

    <beans:bean id="concurrentSessionControlStrategy" class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
    </beans:bean>


    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <beans:bean id="loginEntryPoint" class="com.medicine.framework.security.LoginEntryPoint">
        <beans:property name="defaultTargetUrl" value="/login.jsp"></beans:property>
    </beans:bean>

    <!-- 一个自定义的filter，必须包含authenticationManager,
     accessDecisionManager,securityMetadataSource三个属性。  -->
    <beans:bean id="myFilter" class="com.medicine.framework.security.MyFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManager"/>
        <beans:property name="securityMetadataSource" ref="mySecurityMetadataSource"/>
        <beans:property name="rejectPublicInvocations" value="true"/>
    </beans:bean>

    <beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
        <beans:constructor-arg name="expiredUrl" value="/login.jsp"/>
    </beans:bean>

    <beans:bean class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
        <beans:constructor-arg ref="myFilter"/>
    </beans:bean>


    <!-- 注意能够为authentication-manager 设置alias别名  -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsManager">
            <password-encoder hash="md5">
            </password-encoder>
        </authentication-provider>
    </authentication-manager>

    <!--   事件监听:实现了 ApplicationListener监听接口，包括AuthenticationCredentialsNotFoundEvent 事件，
     AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件 -->
    <beans:bean class="org.springframework.security.authentication.event.LoggerListener"/>


    <!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
    <beans:bean id="userDetailsManager" class="com.medicine.framework.security.MyUserDetailsService"/>

    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <beans:bean id="myAccessDecisionManager"
                class="com.medicine.framework.security.MyAccessDecisionManager">
    </beans:bean>


    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
    <beans:bean id="mySecurityMetadataSource"
                class="com.medicine.framework.security.MyInvocationSecurityMetadataSourceService">
    </beans:bean>

    <!-- 自定义权限不足处理程序 -->
    <beans:bean id="accessDeniedHandler" class="com.medicine.framework.security.MyAccessDeniedHandler">
        <beans:property name="errorPage" value="/commons/403"></beans:property>
    </beans:bean>
</beans:beans>